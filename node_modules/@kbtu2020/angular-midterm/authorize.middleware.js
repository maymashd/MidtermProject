"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAuthorized = exports.authorize = exports.findUser = exports.getCredentials = void 0;
function toBase64(str) {
    return Buffer.from(str).toString("base64");
}
function fromBase64(str) {
    return Buffer.from(str, "base64").toString("ascii");
}
function getCredentials(req) {
    const authHeader = req.headers.authorization;
    if (!authHeader || authHeader == "") {
        return false;
    }
    const parts = authHeader.split(" ");
    if (!parts || parts.length != 2 || parts[0] != "Basic") {
        return false;
    }
    const credentials = fromBase64(parts[1]).split(":");
    if (!credentials || credentials.length != 2) {
        return false;
    }
    return {
        username: credentials[0],
        password: credentials[1],
    };
}
exports.getCredentials = getCredentials;
function findUser({ username, password }, db) {
    const user = db.users.find((u) => u.username.toLowerCase() === username.toLowerCase() &&
        password === u.password);
    return user;
}
exports.findUser = findUser;
async function authorize({ username, password }, db) {
    const user = findUser({ username, password }, db);
    if (!user) {
        return false;
    }
    else {
        return {
            access_token: `Basic ${toBase64(`${username}:${password}`)}`,
            userId: user.id,
            username: user.username,
        };
    }
}
exports.authorize = authorize;
async function isAuthorized(req, db) {
    const credentials = getCredentials(req);
    if (credentials === false) {
        return false;
    }
    const user = findUser(credentials, db);
    return !!user;
}
exports.isAuthorized = isAuthorized;
